// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Product {
  id                   String        @id @map("id")
  name                 String        @map("name")
  description          String?       @map("description")
  shortDescription     String?       @map("shortDescription")
  price                Int       @map("price")
  oldPrice             Decimal?      @map("oldPrice")
  specialPrice         Decimal?      @map("specialPrice")
  discountPercentage   Decimal?      @map("discountPercentage")
  pictureUrl           String?       @map("pictureUrl")
  createdOnUtc         DateTime      @map("createdOnUtc") @default(now())
  updatedOnUtc         DateTime      @map("updatedOnUtc") @default(now())
  stockQuantity        Int?          @map("stockQuantity")
  displayOrder         Int?          @map("displayOrder")
  color                String?       @map("color")
  size                 String?       @map("size")
  season               String?       @map("season")
  material             String?       @map("material")
  style                String?       @map("style")
  pattern              String?       @map("pattern")
  occasion             String?       @map("occasion")
  sleeve               String?       @map("sleeve")
  neckline             String?       @map("neckline")
  dressLength          String?       @map("dressLength")
  waistline            String?       @map("waistline")
  silhouette           String?       @map("silhouette")
  decoration           String?       @map("decoration")
  closureType          String?       @map("closureType")
  pantClosureType      String?       @map("pantClosureType")
  pantLength           String?       @map("pantLength")
  pantStyle            String?       @map("pantStyle")
  fitType              String?       @map("fitType")
  published            Boolean       @map("published")
  deleted              Boolean       @map("deleted")
  isFeatured           Boolean       @map("isFeatured")
  isCallForPricing     Boolean       @map("isCallForPricing")
  isOnSale             Boolean       @map("isOnSale")
  isNew                Boolean       @map("isNew")
  isBestSeller         Boolean       @map("isBestSeller")
  isGiftCard           Boolean       @map("isGiftCard")
  isDownload           Boolean       @map("isDownload")
  isRecurring          Boolean       @map("isRecurring")
  isShipEnabled        Boolean       @map("isShipEnabled")
  isFreeShipping       Boolean       @map("isFreeShipping")
  isOnHomePage         Boolean       @map("isOnHomePage")
  isOnSalePage         Boolean       @map("isOnSalePage")
  allowCustomerReviews Boolean       @map("allowCustomerReviews")
  disableBuyButton     Boolean       @map("disableBuyButton")
  disableWishlistButton Boolean      @map("disableWishlistButton")
  disableCompareButton  Boolean      @map("disableCompareButton")
  showOnHomePage       Boolean       @map("showOnHomePage")
  showOnSalePage       Boolean       @map("showOnSalePage")
  ProductTypeId        String?       @map("ProductTypeId")
  CategoryId           String?       @map("CategoryId")
  ProductBrandId       String?       @map("ProductBrandId")
  productType          ProductType?  @relation(fields: [ProductTypeId], references: [id])
  category             Category?     @relation(fields: [CategoryId], references: [id])
  productBrand         ProductBrand? @relation(fields: [ProductBrandId], references: [id])
  productARelations    RelatedProduct[] @relation("ProductA")
  productBRelations    RelatedProduct[] @relation("ProductB")
  productColors        ProductColors[]
  productPictures      ProductPictures[]
  productSizes         ProductSizes[]
  productTags          ProductTags[]
  productReviews       ProductReview[]
}


model RelatedProduct {
  productA Product @relation("ProductA", fields: [productAId], references: [id])
  productAId String
  productB Product @relation("ProductB", fields: [productBId], references: [id])
  productBId String
  @@id([productAId, productBId])
}

model ProductBrand {
  id          String @id @map("id")
  name        String @unique @map("name")
  description String? @map("description")
  pictureUrl  String? @map("pictureUrl")
  products    Product[]
}

model Category {
  id         String  @id  @map("id")
  name       String  @map("name")
  pictureUrl String? @map("pictureUrl")
  showOnHomePage Boolean @map("showOnHomePage")
  products    Product[]
  categoryProductTypes CategoryProductType[]
}

model ProductType {
  id         String @id  @map("id")
  name       String @map("name")
  description String? @map("description")
  products    Product[]
  categoryProductTypes CategoryProductType[]
}

model ProductColors {
  productId String @map("productId")
  colorId   String @map("colorId")
  product   Product @relation(fields: [productId], references: [id])
  color     Color   @relation(fields: [colorId], references: [id])
  @@id([productId, colorId])
}

model Color {
  id        String @id @map("id")
  name      String @map("name")
  colorCode String @map("colorCode")
  productColors  ProductColors[]
}

model ProductPictures {
  productId String @map("productId")
  pictureId String @map("pictureId")
  product   Product @relation(fields: [productId], references: [id])
  picture   Picture @relation(fields: [pictureId], references: [id])
  @@id([productId, pictureId])
}

model Picture {
  id            String @id @map("id")
  url           String @map("url")
  pictureType   String @map("pictureType")
  pictureTypeId String @map("pictureTypeId")
  productPictures ProductPictures[]
}

model ProductSizes {
  productId String @map("productId")
  sizeId    String @map("sizeId")
  product   Product @relation(fields: [productId], references: [id])
  size      Size @relation(fields: [sizeId], references: [id])
  @@id([productId, sizeId])
}

model Size {
  id   String @id @map("id")
  name String @map("name")
  productSizes ProductSizes[]
}

model ProductTags {
  productId String @map("productId")
  tagId     String @map("tagId")
  product   Product @relation(fields: [productId], references: [id])
  tag       Tag @relation(fields: [tagId], references: [id])
  @@id([productId, tagId])
}

model Tag {
  id   String @id @map("id")
  name String @map("name")
  productTags ProductTags[]
}

model ProductReview {
  id            String   @id @map("id")
  rating        Int      @map("rating")
  comment       String   @map("comment")
  userId        String?  @map("UserId")
  productId     String?  @map("ProductId")
  createdOnUtc  DateTime @map("createdOnUtc") @default(now())
  user          AppUser? @relation(fields: [userId], references: [id])
  product       Product? @relation(fields: [productId], references: [id])
}

model CategoryProductType {
  id           String  @id @map("id")
  categoryId   String? @map("CategoryId")
  productTypeId String? @map("ProductTypeId")
  category     Category? @relation(fields: [categoryId], references: [id])
  productType  ProductType? @relation(fields: [productTypeId], references: [id])
}

model AppUser {
  id                  String @id @map("id")
  displayName         String @map("displayName")
  userName            String? @map("userName")
  normalizedUserName  String? @map("normalizedUserName")
  email               String @map("email")
  normalizedEmail     String @map("normalizedEmail")
  emailConfirmed      Boolean @map("emailConfirmed")
  passwordHash        String @map("passwordHash")
  securityStamp       String @map("securityStamp")
  concurrencyStamp    String @map("concurrencyStamp")
  phoneNumber         String? @map("phoneNumber")
  phoneNumberConfirmed Boolean @map("phoneNumberConfirmed")
  twoFactorEnabled     Boolean @map("twoFactorEnabled")
  lockoutEnd          DateTime? @map("lockoutEnd")
  lockoutEnabled      Boolean @map("lockoutEnabled")
  accessFailedCount    Int @map("accessFailedCount")
  productReviews      ProductReview[]
  addresses           Address[]
}

model Address {
  id         String @id @map("id")
  firstName  String? @map("firstName")
  lastName   String? @map("lastName")
  street     String? @map("street")
  city       String? @map("city")
  state      String? @map("state")
  zipcode    String? @map("zipcode")
  appUserId  String @map("AppUserId")
  appUser    AppUser @relation(fields: [appUserId], references: [id])
  orders     Order[]

}

model DeliveryMethod {
  id            String @id @map("id")
  shortName     String @map("shortName")
  deliveryTime  String @map("deliveryTime")
  description   String @map("description")
  price         Float @map("price")
  orders        Order[]
}

model Order {
  id               String @id @map("id")
  buyerEmail       String @map("buyerEmail")
  orderDate        DateTime @map("orderDate")
  subtotal         Float @map("subtotal")
  status           String @map("status")
  paymentIntentId  String? @map("paymentIntentId")
  shipToAddressId  String? @map("ShipToAddressId")
  deliveryMethodId String? @map("DeliveryMethodId")
  shipToAddress    Address? @relation(fields: [shipToAddressId], references: [id])
  deliveryMethod   DeliveryMethod? @relation(fields: [deliveryMethodId], references: [id])
  orderItems       OrderItem[]
}

model OrderItem {
  id                           String @id @map("id")
  itemOrdered_ProductItemId    String @map("itemOrdered_ProductItemId")
  itemOrdered_ProductName      String @map("itemOrdered_ProductName")
  itemOrdered_PictureUrl       String @map("itemOrdered_PictureUrl")
  price                        Float @map("price")
  quantity                     Int @map("quantity")
  orderId                      String? @map("OrderId")
  order                        Order? @relation(fields: [orderId], references: [id])
}










